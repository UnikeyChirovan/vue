<template>
  <div v-if="notifications.length > 0" class="notification-container">
    <div class="row align-items-center">
      <div class="col-12 col-md-1 d-flex justify-content-center">
        <button class="control-button h-90" @click="prevNotification">Trước</button>
      </div>
      <div class="col-12 col-md-10">
        <h2 class="notification-title text-uppercase">{{ title }}</h2>
        <div class="carousel">
          <div class="carousel-item" v-for="(notification, index) in notifications" :key="notification.id" :class="{ active: index === currentIndex }">
            <div class="notification-content" v-if="currentNotification">
              <h3>{{ currentNotification.title }}</h3>
              <div class="notification-image">
                <img v-if="currentNotification.image_paths.length > 0" :src="`http://127.0.0.1:8000/storage/${currentNotification.image_paths[0]}`" alt="Notification Image" />
              </div>
              <p v-html="currentNotificationFormattedContent"></p>
            </div>
          </div>
        </div>
      </div>
      <div class="col-12 col-md-1 d-flex justify-content-center">
        <button class="control-button h-90" @click="nextNotification">Tiếp theo</button>
      </div>
    </div>
  </div>
</template>


<script setup>
import { ref, computed, onMounted, onUnmounted } from 'vue';
import apiLinks from '../services/api-links';

const props = defineProps({
  title: {
    type: String,
    default: 'Theo Dòng Sự Kiện'
  }
});

const notifications = ref([]);
const currentIndex = ref(0);
const currentNotification = ref(null);

const notificationDetails = ref(
  JSON.parse(localStorage.getItem('notification_detail')) || {}
);

const currentNotificationFormattedContent = computed(() => {
  if (currentNotification.value && currentNotification.value.content) {
    return currentNotification.value.content.replace(/\n/g, '<br>');
  }
  return '';
});
const fetchNotifications = async () => {
  try {
    const storedNotifications = localStorage.getItem('notifications');
    if (storedNotifications) {
      const allNotifications = JSON.parse(storedNotifications);
      notifications.value = allNotifications.filter(
        (notification) => notification.page === 'home'
      ); 

      if (notifications.value.length > 0) {
        await loadAllNotificationDetails(allNotifications); 
      }
    } else {
      const response = await apiLinks.notifications.getAll();
      const allNotifications = response.data;
      notifications.value = allNotifications.filter(
        (notification) => notification.page === 'home'
      ); 
      localStorage.setItem('notifications', JSON.stringify(allNotifications));

      if (notifications.value.length > 0) {
        await loadAllNotificationDetails(allNotifications); 
      }
    }
  } catch (error) {
    console.error('Không thể tải thông báo:', error);
  }
};


const loadAllNotificationDetails = async (allNotifications) => {
  try {
    for (const notification of allNotifications) {
      const id = notification.id;

      if (!notificationDetails.value[id]) {
        const response = await apiLinks.notifications.getDetail(id);
        notificationDetails.value[id] = response.data;
      }
    }
    localStorage.setItem('notification_detail', JSON.stringify(notificationDetails.value));

    if (notifications.value.length > 0) {
      currentNotification.value = notificationDetails.value[notifications.value[0].id];
    }
  } catch (error) {
    console.error('Không thể tải nội dung chi tiết của tất cả thông báo:', error);
  }
};

const nextNotification = () => {
  currentIndex.value = (currentIndex.value + 1) % notifications.value.length;
  const nextId = notifications.value[currentIndex.value].id;
  currentNotification.value = notificationDetails.value[nextId] || null;
};

const prevNotification = () => {
  currentIndex.value = (currentIndex.value - 1 + notifications.value.length) % notifications.value.length;
  const prevId = notifications.value[currentIndex.value].id;
  currentNotification.value = notificationDetails.value[prevId] || null;
};

onMounted(() => {
  const checkDataInterval = setInterval(() => {
    const storedNotifications = localStorage.getItem('notifications');
    if (storedNotifications) {
      notifications.value = JSON.parse(storedNotifications).filter(
        (notification) => notification.page === 'home'
      );
      if (notifications.value.length > 0) {
        clearInterval(checkDataInterval); 
        fetchNotifications(); 
      }
    }
  }, 500); 

  onUnmounted(() => {
    clearInterval(checkDataInterval);
  });
});

</script>

<style scoped>
.notification-container {
  width: 100%;
  margin: auto;
  background-color: #D2E9E9;
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  padding: 20px;
  margin-top: 0;
  margin-bottom: 0;
  position: relative;
}

.notification-title {
  text-align: center;
  color: #2c3e50;
  margin-bottom: 10px;
  font-size: 2rem;
}

.carousel {
  position: relative;
  overflow: hidden;
  border-radius: 10px;
}

.carousel-item {
  opacity: 0;
  transition: opacity 0.5s ease-in-out;
  position: absolute;
  width: 100%;
}

.carousel-item.active {
  opacity: 1;
  position: relative;
}

.notification-content {
  padding: 20px;
  text-align: center;
}

.notification-image {
  height: 200px;
  overflow: hidden;
}

.notification-image img {
  width: 100%;
  height: auto;
  max-height: 100%;
  object-fit: cover;
  border-radius: 10px;
}

.notification-content h3 {
  color: #34495e;
  margin: -1rem 0 10px 0;
  font-size: 1.5rem;
}

.notification-content p {
  color: #555;
  margin: 10px 0;
  font-size: 1.2rem; 

}

.control-button {
  background-color: #ecf0f1;
  color: #34495e;
  border: none;
  padding: 10px 20px;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s;
  height: 90%;
  width: 100%;
}

.control-button:hover {
  background-color: #bdc3c7;
}

</style>
